{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///finlib.min.js","webpack:///webpack/bootstrap ff3ec0a629be3293ed39","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","fv","rate","nper","pmt","pv","arguments","length","undefined","type","r1","Math","pow","npv","trate","_len","cashFlows","Array","_key","i","iSize","ryr","a1","log","a2","a3","ipmt","per","fv_","payment","interest","Object","defineProperty","value"],"mappings":"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","file":"finlib.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"finlib\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"finlib\"] = factory();\n\telse\n\t\troot[\"finlib\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"finlib\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"finlib\"] = factory();\n\telse\n\t\troot[\"finlib\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.fv = fv;\n\texports.pv = pv;\n\texports.pmt = pmt;\n\texports.npv = npv;\n\texports.nper = nper;\n\texports.ipmt = ipmt;\n\t/**\n\t * Future Value\n\t *\n\t * @param {number} rate is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @param {number} nper is the total number of payment periods in the investment.\n\t * @param {number} pmt is the payment made each period; it cannot change over the life of the investment.\n\t * @param {number} [pv=0] is the present value, or the lump-sum amount that a series of future payments is worth now.\n\t * @param {boolean} [type=false] is a value representing the timing of payment: payment at the beginning\n\t *                               of the period == true; payment at the end of the period == false or omitted.\n\t * @returns {number} the future value of an investment based on periodic, constant payments and a\n\t *                   constant interest rate.\n\t */\n\tfunction fv(rate, nper, pmt) {\n\t  var pv = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\t  var type = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];\n\t\n\t  if (rate === 0) {\n\t    return -1 * (pv + nper * pmt);\n\t  }\n\t\n\t  var r1 = rate + 1;\n\t\n\t  return (1 - Math.pow(r1, nper)) * (type ? r1 : 1) * pmt / rate - pv * Math.pow(r1, nper);\n\t}\n\t\n\t/**\n\t * Present Value\n\t *\n\t * @param {number} rate is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @param {number} nper is the total number of payment periods in the investment.\n\t * @param {number} pmt is the payment made each period; it cannot change over the life of the investment.\n\t * @param {number} [fv=0] is the future value, or a cash balance you want to attain after the last payment is made.\n\t * @param {boolean} [type=false] is a value representing the timing of payment: payment at the beginning\n\t *                               of the period == true; payment at the end of the period == false or omitted.\n\t * @returns {number} the present value of an investment: the total amount that a series of future payments is worth now.\n\t */\n\tfunction pv(rate, nper, pmt) {\n\t  var fv = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\t  var type = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];\n\t\n\t  if (rate === 0) {\n\t    return -1 * (nper * pmt + fv);\n\t  }\n\t  var r1 = rate + 1;\n\t\n\t  return ((1 - Math.pow(r1, nper)) / rate * (type ? r1 : 1) * pmt - fv) / Math.pow(r1, nper);\n\t}\n\t\n\t/**\n\t * Payment\n\t *\n\t * @param {number} rate is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @param {number} nper is the total number of payment periods in the investment.\n\t * @param {number} pv is the present value, or the lump-sum amount that a series of future payments is worth now.\n\t * @param {number} [fv=0] is the future value, or a cash balance you want to attain after the last payment is made.\n\t * @param {boolean} [type=false] is a value representing the timing of payment: payment at the beginning\n\t *                               of the period == true; payment at the end of the period == false or omitted.\n\t * @returns {number} the payment based on constant payments and a constant interest rate.\n\t */\n\tfunction pmt(rate, nper, pv) {\n\t  var fv = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\t  var type = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];\n\t\n\t  if (rate === 0) {\n\t    return -1 * (fv + pv) / nper;\n\t  }\n\t  var r1 = rate + 1;\n\t\n\t  return (fv + pv * Math.pow(r1, nper)) * rate / ((type ? r1 : 1) * (1 - Math.pow(r1, nper)));\n\t}\n\t\n\t/**\n\t * Net Present Value\n\t *\n\t * @param {number} rate is the rate of discount over the length of one period.\n\t * @param {...number} cashFlows are payments (negative values) and income (positive values),\n\t *                    equally spaced in time and occurring at the end of each period.\n\t * @returns {number} the net present value of an investment based on a discount rate and a series of future\n\t *                   payments (negative values) and income (positive values).\n\t */\n\tfunction npv(rate) {\n\t  var npv = 0;\n\t  var r1 = rate + 1;\n\t  var trate = r1;\n\t\n\t  for (var _len = arguments.length, cashFlows = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    cashFlows[_key - 1] = arguments[_key];\n\t  }\n\t\n\t  for (var i = 0, iSize = cashFlows.length; i < iSize; ++i) {\n\t    npv += cashFlows[i] / trate;\n\t    trate *= r1;\n\t  }\n\t  return npv;\n\t}\n\t\n\t/**\n\t * Number of Periods\n\t *\n\t * @param {number} rate is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @param {number} pmt is the payment made each period; it cannot change over the life of the investment.\n\t * @param {number} pv is the present value, or the lump-sum amount that a series of future payments is worth now.\n\t * @param {number} [fv=0] is the future value, or a cash balance you want to attain after the last payment is made.\n\t * @param {boolean} [type=false] is a value representing the timing of payment: payment at the beginning\n\t *                               of the period == true; payment at the end of the period == false or omitted.\n\t * @returns {number} the number of periods for an investment based on periodic,\n\t *                   constant payments and a constant interest rate.\n\t */\n\tfunction nper(rate, pmt, pv) {\n\t  var fv = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\t  var type = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];\n\t\n\t  if (rate === 0) {\n\t    return -1 * (fv + pv) / pmt;\n\t  }\n\t  var r1 = rate + 1;\n\t  var ryr = (type ? r1 : 1) * pmt / rate;\n\t  var a1 = ryr - fv < 0 ? Math.log(fv - ryr) : Math.log(ryr - fv);\n\t  var a2 = ryr - fv < 0 ? Math.log(-pv - ryr) : Math.log(pv + ryr);\n\t  var a3 = Math.log(r1);\n\t\n\t  return (a1 - a2) / a3;\n\t}\n\t\n\t/**\n\t * Interest Payment\n\t *\n\t * @param {number} rate is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n\t * @param {number} per is the period for which you want to find the interest and must be in the range 1 to nper.\n\t * @param {number} nper is the total number of payment periods in the investment.\n\t * @param {number} pv is the present value, or the lump-sum amount that a series of future payments is worth now.\n\t * @param {number} [fv_=0] is the future value, or a cash balance you want to attain after the last payment is made.\n\t * @param {boolean} [type=false] is a value representing the timing of payment: payment at the beginning\n\t *                               of the period == true; payment at the end of the period == false or omitted.\n\t * @returns {number} the interest payment for a given period for an investment, based on periodic, constant\n\t *                   payments and a constant interest rate.\n\t */\n\tfunction ipmt(rate, per, nper, pv) {\n\t  var fv_ = arguments.length <= 4 || arguments[4] === undefined ? 0 : arguments[4];\n\t  var type = arguments.length <= 5 || arguments[5] === undefined ? false : arguments[5];\n\t\n\t  var payment = pmt(rate, nper, pv, fv_, type);\n\t  var interest = void 0;\n\t\n\t  if (per === 1) {\n\t    if (type) {\n\t      interest = 0;\n\t    } else {\n\t      interest = -pv;\n\t    }\n\t  } else {\n\t    if (type) {\n\t      interest = fv(rate, per - 2, payment, pv, true) - payment;\n\t    } else {\n\t      interest = fv(rate, per - 1, payment, pv, false);\n\t    }\n\t  }\n\t\n\t  return interest * rate;\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** finlib.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap ff3ec0a629be3293ed39\n **/","/**\n * Future Value\n *\n * @param {number} rate is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n * @param {number} nper is the total number of payment periods in the investment.\n * @param {number} pmt is the payment made each period; it cannot change over the life of the investment.\n * @param {number} [pv=0] is the present value, or the lump-sum amount that a series of future payments is worth now.\n * @param {boolean} [type=false] is a value representing the timing of payment: payment at the beginning\n *                               of the period == true; payment at the end of the period == false or omitted.\n * @returns {number} the future value of an investment based on periodic, constant payments and a\n *                   constant interest rate.\n */\nexport function fv(rate, nper, pmt, pv = 0, type = false) {\n  if (rate === 0) {\n    return -1 * (pv + (nper * pmt));\n  }\n\n  const r1 = rate + 1;\n\n  return ((1 - Math.pow(r1, nper)) * (type ? r1 : 1) * pmt) / rate -\n    pv * Math.pow(r1, nper);\n}\n\n/**\n * Present Value\n *\n * @param {number} rate is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n * @param {number} nper is the total number of payment periods in the investment.\n * @param {number} pmt is the payment made each period; it cannot change over the life of the investment.\n * @param {number} [fv=0] is the future value, or a cash balance you want to attain after the last payment is made.\n * @param {boolean} [type=false] is a value representing the timing of payment: payment at the beginning\n *                               of the period == true; payment at the end of the period == false or omitted.\n * @returns {number} the present value of an investment: the total amount that a series of future payments is worth now.\n */\nexport function pv(rate, nper, pmt, fv = 0, type = false) {\n  if (rate === 0) {\n    return -1 * ((nper * pmt) + fv);\n  }\n  const r1 = rate + 1;\n\n  return (((1 - Math.pow(r1, nper)) / rate) * (type ? r1 : 1) * pmt - fv) / Math.pow(r1, nper);\n}\n\n/**\n * Payment\n *\n * @param {number} rate is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n * @param {number} nper is the total number of payment periods in the investment.\n * @param {number} pv is the present value, or the lump-sum amount that a series of future payments is worth now.\n * @param {number} [fv=0] is the future value, or a cash balance you want to attain after the last payment is made.\n * @param {boolean} [type=false] is a value representing the timing of payment: payment at the beginning\n *                               of the period == true; payment at the end of the period == false or omitted.\n * @returns {number} the payment based on constant payments and a constant interest rate.\n */\nexport function pmt(rate, nper, pv, fv = 0, type = false) {\n  if (rate === 0) {\n    return -1 * (fv + pv) / nper;\n  }\n  const r1 = rate + 1;\n\n  return (fv + pv * Math.pow(r1, nper)) * rate / ((type ? r1 : 1) * (1 - Math.pow(r1, nper)));\n}\n\n/**\n * Net Present Value\n *\n * @param {number} rate is the rate of discount over the length of one period.\n * @param {...number} cashFlows are payments (negative values) and income (positive values),\n *                    equally spaced in time and occurring at the end of each period.\n * @returns {number} the net present value of an investment based on a discount rate and a series of future\n *                   payments (negative values) and income (positive values).\n */\nexport function npv(rate, ...cashFlows) {\n  let npv = 0;\n  const r1 = rate + 1;\n  let trate = r1;\n\n  for (let i = 0, iSize = cashFlows.length; i < iSize; ++i) {\n    npv += cashFlows[i] / trate;\n    trate *= r1;\n  }\n  return npv;\n}\n\n/**\n * Number of Periods\n *\n * @param {number} rate is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n * @param {number} pmt is the payment made each period; it cannot change over the life of the investment.\n * @param {number} pv is the present value, or the lump-sum amount that a series of future payments is worth now.\n * @param {number} [fv=0] is the future value, or a cash balance you want to attain after the last payment is made.\n * @param {boolean} [type=false] is a value representing the timing of payment: payment at the beginning\n *                               of the period == true; payment at the end of the period == false or omitted.\n * @returns {number} the number of periods for an investment based on periodic,\n *                   constant payments and a constant interest rate.\n */\nexport function nper(rate, pmt, pv, fv = 0, type = false) {\n  if (rate === 0) {\n    return -1 * (fv + pv) / pmt;\n  }\n  const r1 = rate + 1;\n  const ryr = (type ? r1 : 1) * pmt / rate;\n  const a1 = ((ryr - fv) < 0) ? Math.log(fv - ryr) : Math.log(ryr - fv);\n  const a2 = ((ryr - fv) < 0) ? Math.log(-pv - ryr) : Math.log(pv + ryr);\n  const a3 = Math.log(r1);\n\n  return (a1 - a2) / a3;\n}\n\n/**\n * Interest Payment\n *\n * @param {number} rate is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n * @param {number} per is the period for which you want to find the interest and must be in the range 1 to nper.\n * @param {number} nper is the total number of payment periods in the investment.\n * @param {number} pv is the present value, or the lump-sum amount that a series of future payments is worth now.\n * @param {number} [fv_=0] is the future value, or a cash balance you want to attain after the last payment is made.\n * @param {boolean} [type=false] is a value representing the timing of payment: payment at the beginning\n *                               of the period == true; payment at the end of the period == false or omitted.\n * @returns {number} the interest payment for a given period for an investment, based on periodic, constant\n *                   payments and a constant interest rate.\n */\nexport function ipmt(rate, per, nper, pv, fv_ = 0, type = false) {\n  const payment = pmt(rate, nper, pv, fv_, type);\n  let interest;\n\n  if (per === 1) {\n    if (type) {\n      interest = 0;\n    } else {\n      interest = -pv;\n    }\n  } else {\n    if (type) {\n      interest = fv(rate, per - 2, payment, pv, true) - payment;\n    } else {\n      interest = fv(rate, per - 1, payment, pv, false);\n    }\n  }\n\n  return interest * rate;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/"],"sourceRoot":""}